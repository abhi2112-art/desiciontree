# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1myMoxu09r_JDTcfYxnr0NLikJ_uhifEV
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
from sklearn.linear_model import LogisticRegression
df=pd.read_excel("/content/bank.xlsx")

df.select_dtypes(object).columns

df["housing"].value_counts()

df["loan"].value_counts()

df["loan"]=np.where(df["loan"]=="yes",1,0)

df["contact"].value_counts()

df["month"].value_counts()

df["deposit"].value_counts()

df["housing"]=np.where(df["housing"]=="yes",1,0)
df["marital"].value_counts()

df["education"].value_counts()

df["default"].value_counts()
df["default"]=np.where(df["default"]=="yes",1,0)

df["poutcome"].value_counts()

df["poutcome"]=np.where(df["poutcome"]=="other","unkwon",df["poutcome"])

df.select_dtypes(int)

df["job"]=df["job"].replace(["management","admin.","entrepreneur"],"white-collar")
df["job"]=df["job"].replace(["technician","services"],"blue-collar")
df["job"]=df["job"].replace(["student"],"unemployed")
df["job"]=df["job"].replace(["retired","self-employed",],"self-depend")
df["job"].value_counts()

df["job"]=df["job"].replace(["technical","services"],"blue_collar")

df["job"]=df["job"].replace(["student"],"unemployed")

df["job"]=df["job"].replace(["retired","self-employed",],"self-depend")
df["poutcome"].value_counts()

def IQR(x):
    q1 = x.quantile(0.25)
    q3 = x.quantile(0.75)
    iqr = q3 - q1
    lf = q1 - (1.5*iqr)
    uf = q3+(1.5*iqr)
    print("LF",lf)
    print("UF",uf)

IQR(df["age"])

plt.boxplot(df["age"])
plt.show()



df["age"]=np.where(df["age"]>74,74,df["age"])

IQR(df["balance"])



df["balance"]=np.where(df["balance"]>4087,4087,df["balance"])
plt.boxplot(df["balance"])
plt.show()

plt.boxplot(df["balance"])
plt.show()

IQR(df["duration"])
plt.boxplot(df["duration"])
plt.show()

df["duration"]=np.where(df["duration"]>1033,1033,df["duration"])

plt.boxplot(df["duration"])
plt.show()



df["age"]=np.where(df["age"]>74,74,df["age"])
df["balance"]=np.where(df["balance"]>4087,4087,df["balance"])
df["duration"]=np.where(df["duration"]>1033,1033,df["duration"])
df["pdays"]=np.where(df["pdays"]>50,50,df["pdays"])
df["campaign"]=np.where(df["campaign"]>6,6,df["campaign"])
df["previous"]=np.where(df["previous"]>2,2,df["previous"])

df.select_dtypes(object).columns

bank=pd.get_dummies(df,columns=['job', 'marital', 'education', 'loan', 'contact', 'poutcome'],drop_first=True)

bank.shape

df.shape

df["job"].value_counts()

X=bank.drop(columns="deposit")
y=bank["deposit"]
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,
                                                random_state=88)

from sklearn.linear_model import LogisticRegression
log=LogisticRegression()
log.fit(X_train,y_train)
print("Train accuracy",log.score(X_train,y_train))
print("Test accuracy",log.score(X_test,y_test))

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier(random_state=5)
dt.fit(X_train,y_train)
print("Train",dt.score(X_train,y_train))
print("Test",dt.score(X_test,y_test))

